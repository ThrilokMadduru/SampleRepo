package com;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.management.RuntimeErrorException;

public class Search {

  private String fileNameToSearch;
  private List<SearchResult> result = new ArrayList<>();
	
  public String getFileNameToSearch() {
	return fileNameToSearch;
  }

  public void setFileNameToSearch(String fileNameToSearch) {
	this.fileNameToSearch = fileNameToSearch;
  }

  public List<SearchResult> getResult() {
	return result;
  }

  public static void main(String[] args) {

	Search fileSearch = new Search();
  
        //try different directory and filename :)
	//fileSearch.searchDirectory(new File("/Users/mkyong/websites"), "post.php");
	fileSearch.searchForFiles(new File("C:/YEAR_2018_JAN_JUNE/Office_India/Resumes"), "post.php");
	//C:\YEAR_2018_JAN_JUNE\Office_India\Resumes
	int count = fileSearch.getResult().size();
	if(count ==0){
	    System.out.println("\nNo result found!");
	}else{
	    System.out.println("\nFound " + count + " result!\n");
	    for (SearchResult matched : fileSearch.getResult()){
		System.out.println("Found : " + matched);
	    }
	}
  }

  public void searchForFiles(File directory, String fileNameToSearch) {

	  if(fileNameToSearch== null || fileNameToSearch.equals(""))throw new RuntimeException("Data Invalid");
	  String[] parts=checkSearchCriteria(fileNameToSearch.trim());
	  
	  for(String srhString: parts)
	  {
		  File[] files=directory.listFiles();
		  if(files.length==0){
			  System.out.println("the directory is empty");
		  }
		  else
		  {
			  for(File subFile: files)
			  {
				  if(subFile.isDirectory())
				  {
					  search(subFile,srhString);
				  }
				  else
				  {
					  if(validatePattern(subFile,srhString))
					  {
			result.add(buildSearch(srhString,subFile.getAbsoluteFile().toString()));
					  }
				  }
			  }
		  }
	  }
	  

  }
  
  private boolean validatePattern(File fileName,String srhString)
  {
	  return (fileName.getName().toLowerCase()).indexOf(srhString.toLowerCase())!=-1;
  }

  private SearchResult buildSearch(String fileName,String path)
  {
	  return new SearchResult(fileName,path);
  }
  
  class SearchResult
  {
	  private String path;
	  private String fileName;
	  
	  public SearchResult(String path,String fileName){
		  this.fileName=fileName;
		  this.path=path;
		  }
	  
	  public String getPath()
	  {
		  return path;
	  }
	  
	  public String getFileName()
	  {
		  return fileName;
	  }
  }
  private void search(File file,String srhString) {

	if (file.isDirectory()) {
	  System.out.println("Searching directory ... " + file.getAbsoluteFile());
		
            //do you have permission to read this directory?	
	    if (file.canRead()) {
		for (File subFile : file.listFiles()) {
		    if (subFile.isDirectory()) {
			search(subFile,srhString);
		    } else {
		    	 if(validatePattern(subFile,srhString))
				  {
					  result.add(buildSearch(srhString,subFile.getAbsoluteFile().toString()));
				  }

		}
	    }

	 } else {
		System.out.println(file.getAbsoluteFile() + "Permission Denied");
	 }
      }

  }
  
  
  
  private String[] checkSearchCriteria(String info)
  
   {
	  
	  String[] parts=null;
	  if(info.indexOf(' ')!=-1)
	  {
		  parts=info.split(",");
		  
	  }
	  
	  else if(info.indexOf(",")!=-1)
	  {
		  parts=fileNameToSearch.split(",");
		  
	  }
	  else
	  {
		  parts[0]=info;
	  }
	  return parts;
  }

}
